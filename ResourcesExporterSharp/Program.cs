using System.Xml;
using System.Xml.Serialization;

IEnumerable<string> GetNextResourcePath(string path)
{
    foreach (var file in Directory.GetFiles(path))
    {
        if (file.EndsWith(".resx"))
        {
            yield return file;
        }
    }
    foreach (var folder in Directory.GetDirectories(path))
    {
        foreach (var f in GetNextResourcePath(folder))
        {
            yield return f;
        }
    }
}

Console.WriteLine("Please enter path to main folder");
string? path = Console.ReadLine();

if (string.IsNullOrEmpty(path))
{
    Console.WriteLine("Invalid argument, exiting...");
    return;
}

var writer = XmlWriter.Create("Output.xml");
writer.WriteComment("Auto-generated by ResourcesExporterSharp, under MIT license by Christian Chaux, more information at https://github.com/Xwilarg/ResourcesExporterSharp/blob/master/LICENSE");

List<(Resource Resource, string Path)> resources = new();
XmlSerializer xml = new(typeof(Resource));

foreach (var file in GetNextResourcePath(path))
{
    Console.Write($"Found resource file at {file}... ");
    using var stream = new FileStream(file, FileMode.Open, FileAccess.Read);
    var tmp = xml.Deserialize(stream);
    Resource res = (Resource)tmp!;

    if (res == null || res.Data == null || !res.Data.Any())
    {
        Console.WriteLine("No data, skipping");
        continue;
    }
    Console.WriteLine($"OK, {res.Data.Length} elements");

    resources.Add((res, file));
}

if (!resources.Any())
{
    Console.WriteLine("Fatal Error: No resource found");
}

var output = new Resource()
{
    Data = resources.SelectMany(x =>
    {
        var data = x.Resource.Data;
        Console.WriteLine(x.Path);
        foreach (var d in data)
        {
            d.Path = x.Path;
        }
        return data;
    }).ToArray(),
    Resheaders = resources[0].Resource.Resheaders
};
xml.Serialize(writer, output);
writer.Flush();
writer.Close();

// XML

[Serializable, XmlRoot("root")]
public record Resource
{
    [XmlElement("data")]
    public Data[] Data;
    [XmlElement("resheader")]
    public Resheader[] Resheaders;
}

public record Resheader
{
    [XmlAttribute("name")]
    public string Name;
    [XmlElement("value")]
    public string Value;
}

public record Data
{
    [XmlAttribute("path")]
    public string Path;
    [XmlAttribute("name")]
    public string Name;
    [XmlAttribute("xml:space")]
    public string XmlSpace;
    [XmlElement("value")]
    public string Value;
    [XmlElement("comment")]
    public string Comment;
}