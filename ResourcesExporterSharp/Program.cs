using System.Xml;
using System.Xml.Serialization;

IEnumerable<string> GetNextResourcePath(string path)
{
    foreach (var file in Directory.GetFiles(path))
    {
        if (file.EndsWith(".resx"))
        {
            yield return file;
        }
    }
    foreach (var folder in Directory.GetDirectories(path))
    {
        foreach (var f in GetNextResourcePath(folder))
        {
            yield return f;
        }
    }
}

Console.WriteLine("Please enter path to main folder");
string? path = Console.ReadLine();

if (string.IsNullOrEmpty(path))
{
    Console.WriteLine("Invalid argument, exiting...");
    return;
}

XmlWriter writer = XmlWriter.Create(@"Output.xml");

writer.WriteStartDocument();

writer.WriteComment("Auto-generated by ResourcesExporterSharp, under MIT license by Christian Chaux, more information at https://github.com/Xwilarg/ResourcesExporterSharp/blob/master/LICENSE");

writer.WriteStartElement("root");

foreach (var file in GetNextResourcePath(path))
{
    Console.Write($"Found resource file at {file}... ");
    XmlSerializer xml = new(typeof(Resource));
    using var stream = new FileStream(file, FileMode.Open, FileAccess.Read);
    var tmp = xml.Deserialize(stream);
    Resource res = (Resource)tmp!;

    if (res == null || res.Data == null || !res.Data.Any())
    {
        Console.WriteLine("No data, skipping");
        continue;
    }
    Console.WriteLine($"OK, {res.Data.Length} elements");

    writer.WriteStartElement("file");
    writer.WriteElementString("path", file);
    foreach (var e in res.Data)
    {
        writer.WriteStartElement("data");
        writer.WriteElementString("name", e.Name);
        writer.WriteElementString("value", e.Value);
        writer.WriteElementString("comment", e.Comment);
        writer.WriteEndElement();
    }
    writer.WriteEndElement();
}

writer.WriteEndElement();
writer.WriteEndDocument();
writer.Flush();
writer.Close();

// XML

[Serializable, XmlRoot("root")]
public record Resource
{
    [XmlElement("data")]
    public Data[] Data;
}

public record Data
{
    [XmlAttribute("name")]
    public string Name;
    [XmlElement("value")]
    public string Value;
    [XmlElement("comment")]
    public string Comment;
}